"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
from . import service_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class MFCControllerStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    StopServer: grpc.UnaryUnaryMultiCallable[
        service_pb2.StopRequest,
        service_pb2.Empty,
    ]
    """Terminate/stop server."""

    ServerHealthCheck: grpc.UnaryUnaryMultiCallable[
        service_pb2.Empty,
        service_pb2.Empty,
    ]
    """Does nothing. Used to check sever health."""

class MFCControllerAsyncStub:
    StopServer: grpc.aio.UnaryUnaryMultiCallable[
        service_pb2.StopRequest,
        service_pb2.Empty,
    ]
    """Terminate/stop server."""

    ServerHealthCheck: grpc.aio.UnaryUnaryMultiCallable[
        service_pb2.Empty,
        service_pb2.Empty,
    ]
    """Does nothing. Used to check sever health."""

class MFCControllerServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def StopServer(
        self,
        request: service_pb2.StopRequest,
        context: _ServicerContext,
    ) -> typing.Union[service_pb2.Empty, collections.abc.Awaitable[service_pb2.Empty]]:
        """Terminate/stop server."""

    @abc.abstractmethod
    def ServerHealthCheck(
        self,
        request: service_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[service_pb2.Empty, collections.abc.Awaitable[service_pb2.Empty]]:
        """Does nothing. Used to check sever health."""

def add_MFCControllerServicer_to_server(servicer: MFCControllerServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
